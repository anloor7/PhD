attach(Migration)
length(distance)
par(mfrow=c(3,3))
plot(density(distance, kernel='gaussian'))
plot(density(distance, kernel='epanechnikov'))
plot(density(distance, kernel='rectangular'))
plot(density(distance, kernel='triangular'))
plot(density(distance, kernel='biweight'))
plot(density(distance, kernel='cosine'))
plot(density(distance, kernel='optcosine'))
8/9
8*0.4+9*0.6
8*0.4+9.3*0.6
8.3*0.4+9.3*0.6
1*2^45
3.5/100
isprime(9)
is.prime(9)
is.primitive(9)
N <- 125000
n <- 75
mmuest <- 435
vpob <- 680
f <- n/N
alpha <- 0.05
dtpob <- sqrt(vpob); dtpob
lambda <- sqrt(1/(1-alpha))
Li <- mmuest-lambda*dtpob/sqrt(n)*sqrt(1-f)
Ls <- mmuest+lambda*dtpob/sqrt(n)*sqrt(1-f)
cbind(Li, Ls)
N <- 125000
n <- 75
mmuest <- 435
vpob <- 680
f <- n/N
alpha <- 0.95
dtpob <- sqrt(vpob); dtpob
lambda <- sqrt(1/(1-alpha))
Li <- mmuest-lambda*dtpob/sqrt(n)*sqrt(1-f)
Ls <- mmuest+lambda*dtpob/sqrt(n)*sqrt(1-f)
cbind(Li, Ls)
n <- 65
N <- 520
f <- n/N
mmuest <- 35.7
s <- 11.2
alpha <- 0.99
lambda <- sqrt(1/(1-alpha))
Li <- mmuest-lambda*(s/sqrt(n))*sqrt(1-f)
Ls <- mmuest+lambda*(s/sqrt(n))*sqrt(1-f)
cbind(Li, Ls)
a <- 35
n <- 200
pest <- 35/200; pest
alpha <- 0.05
Li <- pest-qnorm(1-alpha/2)*sqrt(pest*(1-pest)/(n-1))
Ls <- pest+qnorm(1-alpha/2)*sqrt(pest*(1-pest)/(n-1))
cbind(Li, Ls)
e <- 0.03
ncr <- 1+qnorm(1-alpha/2)^2*pest*(1-pest)/(e^2); ncr
ceiling(ncr)
r
r
r
ppeor <- 0.5
ncr <- 1+qnorm(1-alpha)^2*ppeor*(1-ppeor)/(e^2); ncr
ceiling(ncr)
ppeor <- 0.5
ncr <- 1+qnorm(1-alpha/2)^2*ppeor*(1-ppeor)/(e^2); ncr
ceiling(ncr)
N <- 3000
pant <- 0.60
ncr <- 1+qnorm(0.975)^2*pant*(1-pant)/(0.10^2); ncr
nsr <- ncr/(1+((ncr-1)/N)); nsr
ceiling(nsr)
N <- 3000
pant <- 0.60
ncr <- 1+qnorm(0.975)^2*pant*(1-pant)/(0.05^2); ncr
nsr <- ncr/(1+((ncr-1)/N)); nsr
ceiling(nsr)
N <- 3000
pant <- 0.50
ncr <- 1+qnorm(0.975)^2*pant*(1-pant)/(0.05^2); ncr
nsr <- ncr/(1+((ncr-1)/N)); nsr
ceiling(nsr)
N <- 35
mediam <- 3500/35; mediam
alpha <- 0.95
lambda <- sqrt(1/(1-alpha))
total <- 3500
alpha <- 0.95
lambda <- sqrt(1/(1-alpha))
N <- 35
mediam <- 3500/35; mediam # Éste es el estimador de la media
lambda
s <- sqrt(625)
Li <- mediam-lambda*(s/sqrt(n))*sqrt((1-f))
Ls <- mediam+lambda*(s/sqrt(n))*sqrt((1-f))
cbind(total*Li, total*Ls)
total <- 3500
alpha <- 0.95
lambda <- sqrt(1/(1-alpha))
mediam <- 3500/35; mediam # Éste es el estimador de la media
lambda
s <- sqrt(625)
f
total <- 3500
alpha <- 0.05
lambda <- sqrt(1/(1-alpha))
N <- 35
mediam <- 3500/35; mediam # Éste es el estimador de la media
lambda
s <- sqrt(625)
Li <- mediam-qnorm(1-alpha/2)*s/sqrt(n)
Ls <- mediam-+norm(1-alpha/2)*s/sqrt(n)
cbind(total*Li, total*Ls)
total <- 3500
alpha <- 0.05
lambda <- sqrt(1/(1-alpha))
N <- 35
mediam <- 3500/35; mediam # Éste es el estimador de la media
lambda
s <- sqrt(625)
Li <- mediam-qnorm(1-alpha/2)*s/sqrt(n)
Ls <- mediam+qnorm(1-alpha/2)*s/sqrt(n)
cbind(total*Li, total*Ls)
qnorm(1-alpha/2)*s/sqrt(n)
total*qnorm(1-alpha/2)*s/sqrt(n)
cbind(total*Li, total*Ls)
total*qnorm(1-alpha/2)*s/sqrt(n)
N <- 125000
n <- 75
mmuest <- 435
vpob <- 680
f <- n/N
alpha <- 0.95
dtpob <- sqrt(vpob); dtpob
lambda <- sqrt(1/(1-alpha))
Li <- mmuest-lambda*dtpob/sqrt(n)*sqrt(1-f)
Ls <- mmuest+lambda*dtpob/sqrt(n)*sqrt(1-f)
cbind(Li, Ls)
N <- 125000
n <- 75
mmuest <- 435
vpob <- 680
f <- n/N
alpha <- 0.95
dtpob <- sqrt(vpob); dtpob
lambda <- sqrt(1/(1-alpha))
Li <- mmuest-lambda*dtpob/sqrt(n)*sqrt(1-f)
Ls <- mmuest+lambda*dtpob/sqrt(n)*sqrt(1-f)
cbind(Li, Ls)
n <- 65
N <- 520
f <- n/N
mmuest <- 35.7
s <- 11.2
alpha <- 0.99
lambda <- sqrt(1/(1-alpha))
Li <- mmuest-lambda*(s/sqrt(n))*sqrt(1-f)
Ls <- mmuest+lambda*(s/sqrt(n))*sqrt(1-f)
cbind(Li, Ls)
a <- 35
n <- 200
pest <- 35/200; pest
alpha <- 0.05
Li <- pest-qnorm(1-alpha/2)*sqrt(pest*(1-pest)/(n-1))
Ls <- pest+qnorm(1-alpha/2)*sqrt(pest*(1-pest)/(n-1))
cbind(Li, Ls)
e <- 0.03
ncr <- 1+qnorm(1-alpha/2)^2*pest*(1-pest)/(e^2); ncr
ceiling(ncr)
ppeor <- 0.5
ncr <- 1+qnorm(1-alpha/2)^2*ppeor*(1-ppeor)/(e^2); ncr
ceiling(ncr)
35/200
n*P
ppeor <- 0.5
ncr <- 1+qnorm(1-alpha/2)^2*ppeor*(1-ppeor)/(e^2); ncr
ceiling(ncr)
total <- 3500
alpha <- 0.05
lambda <- sqrt(1/(1-alpha))
N <- 35
mediam <- 3500/35; mediam # Éste es el estimador de la media
lambda
s <- sqrt(625)
Li <- mediam-qnorm(1-alpha/2)*s/sqrt(n)
Ls <- mediam+qnorm(1-alpha/2)*s/sqrt(n)
total*qnorm(1-alpha/2)*s/sqrt(n)
cbind(total*Li, total*Ls)
N <- 3000
pant <- 0.60
ncr <- 1+qnorm(0.975)^2*pant*(1-pant)/(0.10^2); ncr
nsr <- ncr/(1+((ncr-1)/N)); nsr
ceiling(nsr)
N <- 3000
pant <- 0.50
ncr <- 1+qnorm(0.975)^2*pant*(1-pant)/(0.05^2); ncr
nsr <- ncr/(1+((ncr-1)/N)); nsr
ceiling(nsr)
N <- 3000
pant <- 0.60
ncr <- 1+qnorm(0.975)^2*pant*(1-pant)/(0.10^2); ncr
nsr <- ncr/(1+((ncr-1)/N)); nsr
ceiling(nsr)
plot(low~lwt, main="Ajuste logístico")
mod_logit <- glm(low~lwt,family=binomial(link="logit"))
beta=coef(mod_logit); beta
summary(mod_logit)
library(splines)
library(sm)
library(mgcv)
data(birth)
head(birth)
datos <- birth[birth$Smoke=='S',]
head(datos, 10)
low <- datos$Low
lwt <- datos$Lwt
plot(low~lwt, main="Ajuste logístico")
mod_logit <- glm(low~lwt,family=binomial(link="logit"))
beta=coef(mod_logit); beta
h=h.select(lwt, low)
model2 <- sm.regression(lwt, low, h=h,add=T,col="blue")
predict(model2)
#-- Ajuste local logístico
log_local <- sm.binomial(lwt,low,h=h,display="none")
lines(log_local$eval.points,log_local$estimate,col="red")
low
h=h.select(lwt, low)
model2 <- sm.regression(lwt, low, h=h,add=T,col="blue")
predict(model2)
#-- Ajuste local logístico
log_local <- sm.binomial(lwt,low,h=h,display="none")
plot(low~lwt, main="Ajuste logístico")
mod_logit <- glm(low~lwt,family=binomial(link="logit"))
beta=coef(mod_logit); beta
summary(mod_logit)
curve(exp(beta[1]+beta[2]*x)/(1+exp(beta[1]+beta[2]*x)),add=TRUE)
h=h.select(lwt, low)
model2 <- sm.regression(lwt, low, h=h,add=T,col="blue")
#-- Ajuste local logístico
log_local <- sm.binomial(lwt,low,h=h,display="none")
lines(log_local$eval.points,log_local$estimate,col="red")
predict(log_)
model2$eval.points; model2$estimate
log_local$eval.points; log_local$estimate
data(follicle); head(follicle)
length(age)
data(follicle); head(follicle)
log_count <- log(follicle$Count)
age <- follicle$Age
length(age)
plot(log_count~age)
lines(spl);
plot(log_count~age)
spl <- smooth.spline(age, log_count, cv=FALSE)
lines(spl);
spl$lambda
spl$df
110-spl$df
x0 <- c(20, 30, 45)
y0 <- predict(spl,x=x0)$y; y0
points(x0,y0,pch=16,col="red")
x0 <- c(20,25, 30, 45)
y0 <- predict(spl,x=x0)$y; y0
x0 <- c(20,10, 30, 45)
y0 <- predict(spl,x=x0)$y; y0
x0 <- c(20,1, 30, 45)
y0 <- predict(spl,x=x0)$y; y0
x0 <- c(20, 30, 45)
y0 <- predict(spl,x=x0)$y; y0
points(x0,y0,pch=16,col="red")
spl <- smooth.spline(age, log_count)
lines(spl);
spl$lambda
spl <- smooth.spline(age, log_count, cv=F)
lines(spl);
spl$lambda
summary(spl)
spl$df
spl1<-smooth.spline(age,log_count,df=10)
lines(spl1,col="blue")
spl1$lambda
spl1$d
spl1$df
110-spl1$df
spl1$df
spl2<-smooth.spline(age,log_count,df=2)
lines(spl2,col="red")
spl2$lambda
spl2$df
summary(spl2)
names(spl2)
spl2$df; 110-spl2$df
x <- age
y <- log_count
indx=sort(x,index.return=TRUE)$ix
x=x[indx]
y=y[indx]
plot(y~x,xlab="Edad",ylab="log_count",
main="Ajustes de regresión spline cúbica")
nodos <- c(20, 30, 45)
X_diseno <- bs(x=x,knots=nodos)
regre_spl <- lm(y~X_diseno)
summary(regre_spl)
regre_spl$df.residual
X_diseno1=bs(x=x,df=4)
regre_spl1 <- lm(y~X_diseno1)
summary(regre_spl1)
yhat=predict(regre_spl1)
lines(x,yhat,col="darkgreen")
yhat <- predict(regre_spl)
lines(x,yhat,col="blue")
regre_spl$rank
regre_spl$df.residual
X_diseno1=bs(x=x,df=4)
regre_spl1 <- lm(y~X_diseno1)
summary(regre_spl1)
yhat=predict(regre_spl1)
lines(x,yhat,col="darkgreen")
regre_spl1$df.residual
names(regre_spl1)
regre_spl1$fitted.values
names(regre_spl1)
regre_spl1$xlevels
regre_spl1$rank
nodos <- c(20, 30, 45)
X_diseno <- bs(x=x,knots=nodos)
regre_spl <- lm(y~X_diseno)
summary(regre_spl)
yhat <- predict(regre_spl)
lines(x,yhat,col="blue")
regre_spl$rank
regre_spl$df.residual
X_diseno1=bs(x=x,df=4)
regre_spl1 <- lm(y~X_diseno1)
summary(regre_spl1)
yhat=predict(regre_spl1)
lines(x,yhat,col="darkgreen")
regre_spl1$rank
regre_spl1$df.residual
plot(y~x,xlab="Edad",ylab="log_count",
main="Ajustes de regresión spline lineal")
nodos <- c(20, 30, 45)
X_diseno <- bs(x=x,knots=nodos, degree = 1)
nodos <- c(20, 30, 45)
X_diseno <- bs(x=x,knots=nodos, degree = 1)
regre_spl <- lm(y~X_diseno)
summary(regre_spl)
yhat <- predict(regre_spl)
lines(x,yhat,col="blue")
regre_spl$rank
regre_spl$rank
regre_spl$rank
plot(y~x,xlab="Edad",ylab="log_count",
main="Ajustes de regresión spline lineal")
nodos <- c(20, 30, 45)
X_diseno <- bs(x=x,knots=nodos, degree = 1)
regre_spl <- lm(y~X_diseno)
summary(regre_spl)
yhat <- predict(regre_spl)
lines(x,yhat,col="blue")
regre_spl$rank
regre_spl$df.residual
nodos <- c(20, 30, 35)
X_diseno <- bs(x=x,knots=nodos)
regre_spl <- lm(y~X_diseno)
summary(regre_spl)
yhat <- predict(regre_spl)
lines(x,yhat,col="blue")
regre_spl$rank
regre_spl$df.residual
X_diseno1=bs(x=x,df=4)
regre_spl1 <- lm(y~X_diseno1)
summary(regre_spl1)
yhat=predict(regre_spl1)
lines(x,yhat,col="darkgreen")
X_diseno <- bs(x=x,knots=nodos, degree = 1)
regre_spl <- lm(y~X_diseno)
summary(regre_spl)
yhat <- predict(regre_spl)
lines(x,yhat,col="blue")
plot(y~x,xlab="Edad",ylab="log_count",
main="Ajustes de regresión spline lineal")
nodos <- c(20, 30, 35)
X_diseno <- bs(x=x,knots=nodos, degree = 1)
regre_spl <- lm(y~X_diseno)
summary(regre_spl)
yhat <- predict(regre_spl)
lines(x,yhat,col="blue")
regre_spl$rank
regre_spl$df.residual
X_diseno1=bs(x=x,df=4, degree=1)
regre_spl1 <- lm(y~X_diseno1)
summary(regre_spl1)
yhat=predict(regre_spl1)
lines(x,yhat,col="darkgreen")
regre_spl1$rank
plot(y~x,xlab="Edad",ylab="log_count",
main="Ajustes de regresión spline cúbica")
nodos <- c(20, 30, 35)
X_diseno <- bs(x=x,knots=nodos)
regre_spl <- lm(y~X_diseno)
summary(regre_spl)
yhat <- predict(regre_spl)
lines(x,yhat,col="blue")
regre_spl$rank
regre_spl$df.residual
X_diseno1=bs(x=x,df=4)
regre_spl1 <- lm(y~X_diseno1)
summary(regre_spl1)
yhat=predict(regre_spl1)
lines(x,yhat,col="darkgreen")
length(x)
median(x)
plot(y~x,xlab="Edad",ylab="log_count",
main="Ajustes de regresión penalizada")
mod_ps <- gam(y~s(x,k=15))
summary(mod_ps)
mod_ps$df.residual
mod_ps$sp
mod_ps <- gam(y~s(x,k=15))
summary(mod_ps)
mod_ps$df.residual
110-104.609
plot(mod_ps) # Esto te da la representación sin el intercepto
plot(mod_ps, residuals=T) # Esto te da la representación sin el intercepto
mod_ps$sp
names(X_diseno1)
names(regre_spl1)
regre_spl1$assign
regre_spl1$terms
summary(regre_spl1)
names(regre_spl1)
regre_spl1$xlevels
regre_spl1$calls
regre_spl1$effects
names(regre_spl1)
X_diseno1
X_diseno1; median(x)
regre_spl1$
X_diseno1; median(x)
median(x)
median(x)
q()
install.packages(roxygen)
"roxygen2"
install.packages('roxygen2')
library(roxygen2)
#' Add together two numbers
#'
#' @param x A number.
#' @param y A number.
#' @return The sum of \code{x} and \code{y}.
#' @examples
#' add(1, 1)
#' add(10, 1)
add <- function(x, y){
x + y
}
devtools::document()
library(devtools)
install.packages('devtools')
library(devtools)
#' Add together two numbers
#'
#' @param x A number.
#' @param y A number.
#' @return The sum of \code{x} and \code{y}.
#' @examples
#' add(1, 1)
#' add(10, 1)
add <- function(x, y){
x + y
}
devtools::document()
install.packages('root')
install.packages(c('testthat', 'knitr'))
install.packages(c("testthat", "knitr"))
library(c(knitr, testhat))
library(knitr
library(knitr
library(knitr)
library(testthat)
#' Add together two numbers
#'
#' @param x A number.
#' @param y A number.
#' @return The sum of \code{x} and \code{y}.
#' @examples
#' add(1, 1)
#' add(10, 1)
add <- function(x, y){
x + y
}
devtools::document()
roxygen2::roxygenise()
library(MASS)
library(MTS) # Es un paquete para simular modelos VARMA
M <- vector(mode = 'list', length= 10)
for (i in 1:10) {
M[[i]] = matrix(nrow = 20, ncol = 2)
}
P <- vector(mode = 'list', length= 10)
for (i in 1:10) {
P[[i]] = matrix(nrow = 20, ncol = 2)
}
pendigits <- read.csv('pendigits.txt', header = F)
pendigits <- read.csv('pendigits.txt', header = F)
pendigits <- read.csv('pendigits.txt', header = F)
pendigits <- read.csv('pendigits.txt', header = F)
