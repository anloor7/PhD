a*b
sum(a*b)
a <- c(2, 3, 3)
which(a > 2)
a > 2
qac_uts <- function(X, Y, quant = c(0.1, 0.5, 0.9), l = 1) {
k <- length(quant)
nx <- length(X)
ny <- length(Y)
qx <- quantile(X, probs = quant)
qy <- quantile(Y, probs = quant)
gammax <- numeric(k^2) # Vector gamma for X, regarding lag 1
gammay <- numeric(k^2) # Vector gamma for Y, regarding lag 1
for (i in 1 : k) {
for (j in 1 : k) {
ax <- (X <= qx[i])[1 : (n - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
gammax[i, j] = (1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
gammay[i, j] = (1/(ny - l))*sum(ay * by)-qy[i]*qy[j]
}
}
EuclideanDistance(gammax, gammay)
}
a <- c(1, 2, 3, 4)
b <- c(1, 2, 3, 4)
qac_uts(a, b)
qac_uts <- function(X, Y, quant = c(0.1, 0.5, 0.9), l = 1) {
k <- length(quant)
nx <- length(X)
ny <- length(Y)
qx <- quantile(X, probs = quant)
qy <- quantile(Y, probs = quant)
gammax <- numeric(k^2) # Vector gamma for X, regarding lag 1
gammay <- numeric(k^2) # Vector gamma for Y, regarding lag 1
for (i in 1 : k) {
for (j in 1 : k) {
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
gammax[i, j] = (1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
gammay[i, j] = (1/(ny - l))*sum(ay * by)-qy[i]*qy[j]
}
}
EuclideanDistance(gammax, gammay)
}
qac_uts(a, b)
a
b
a <- X
X <- a
Y <- b
quant = c(0.1, 0.5, 0.9)
l = 1
k <- length(quant)
nx <- length(X)
ny <- length(Y)
qx <- quantile(X, probs = quant)
qy <- quantile(Y, probs = quant)
gammax <- numeric(k^2) # Vector gamma for X, regarding lag 1
gammay <- numeric(k^2) # Vector gamma for Y, regarding lag 1
for (i in 1 : k) {
for (j in 1 : k) {
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
gammax[i, j] = (1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
gammay[i, j] = (1/(ny - l))*sum(ay * by)-qy[i]*qy[j]
}
}
nx - l
i = i
i = 1
j = 1
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
gammax[i, j] = (1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
gammay[i, j] = (1/(ny - l))*sum(ay * by)-qy[i]*qy[j]
(X <= qx[i])[1 : (nx - l)]
(X[(1 + l) : nx] <= qx[j])
(Y <= qy[i])[1 : (ny - l)]
(Y[(1 + l) : ny] <= qy[j])
(1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
(1/(nx - l))
sum(ax * bx)
ax
bx
X[(1 + l) : nx
X[(1 + l) : nx]
X[(1 + l) : nx]
b
sum(ax * bx)
qx[i]*qx[j]
gammax <- matrix(0, k, k) # Vector gamma for X, regarding lag 1
gammay <- matrix(0, k, k) # Vector gamma for Y, regarding lag 1
i
j
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
gammax[i, j] = (1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
gammay[i, j] = (1/(ny - l))*sum(ay * by)-qy[i]*qy[j]
qac_uts <- function(X, Y, quant = c(0.1, 0.5, 0.9), l = 1) {
k <- length(quant)
nx <- length(X)
ny <- length(Y)
qx <- quantile(X, probs = quant)
qy <- quantile(Y, probs = quant)
gammax <- matrix(0, k, k) # Vector gamma for X, regarding lag 1
gammay <- matrix(0, k, k) # Vector gamma for Y, regarding lag 1
for (i in 1 : k) {
for (j in 1 : k) {
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
gammax[i, j] = (1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
gammay[i, j] = (1/(ny - l))*sum(ay * by)-qy[i]*qy[j]
}
}
EuclideanDistance(as.vector(gammax), as.vector(gammay))
}
qac_uts(a, b)
b <-(10, 11, 12, 13)
b <-c(10, 11, 12, 13)
qac_uts(a, b)
qy <- quantile(B, probs = quant)
qy <- quantile(b, probs = quant)
qy
i
j
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
ay
by
qy
a
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ax
bx
qx
x
y
a
b
qx
a
b
qx
qy
X
Y
Y <- b
Y
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
ay
by
qac_uts(a, b)
a
b
k
quant
l
k <- length(quant)
nx <- length(X)
ny <- length(Y)
qx <- quantile(X, probs = quant)
qy <- quantile(Y, probs = quant)
gammax <- matrix(0, k, k) # Vector gamma for X, regarding lag 1
gammay <- matrix(0, k, k) # Vector gamma for Y, regarding lag 1
for (i in 1 : k) {
for (j in 1 : k) {
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
gammax[i, j] = (1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
gammay[i, j] = (1/(ny - l))*sum(ay * by)-qy[i]*qy[j]
}
}
gammax
gammay
i
j
i = 1
j = 1
a
b
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
gammax[i, j] = (1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
gammay[i, j] = (1/(ny - l))*sum(ay * by)-qy[i]*qy[j]
gammax[1, 1]
(1/(nx - l))
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
sum(ax * bx)
qx[i]*qx[j]
i = 1
j = 2
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
sum(ax * bx)
ax
bx
qac_mts <- function(X, Y){
c <- ncol(X)
dist <- 0
for (i in 1 : c) {
dist <- dist + qac_uts(X[,i], Y[,i])
}
dist
}
a <- diag(3)
b <- diag(2)
a <- diag(3)
b <- diag(3)
a
b
qac_mts(a, b)
a <- rbind(c(2, 3), c(7,8))
b <- rbind(c(1, 7), c(15,8))
a
b
qac_mts(a, b)
qac_uts(a[,1], b[,1])
qac_uts(a[,2], b[,2])
188+83+1
a <- arima.sim(order(1, 0, 0))
a <- c(1, 2, 3, 4)
b <- c(1, 2, 3, 4)
qac_uts(a, b)
qaf_uts <- function(X, Y, quant = c(0.1, 0.5, 0.9), l = 1) {
k <- length(quant)
nx <- length(X)
ny <- length(Y)
qx <- quantile(X, probs = quant)
qy <- quantile(Y, probs = quant)
gammax <- matrix(0, k, k) # Vector gamma for X, regarding lag 1
gammay <- matrix(0, k, k) # Vector gamma for Y, regarding lag 1
for (i in 1 : k) {
for (j in 1 : k) {
ax <- (X <= qx[i])[1 : (nx - l)]
bx <- (X[(1 + l) : nx] <= qx[j])
ay <- (Y <= qy[i])[1 : (ny - l)]
by <- (Y[(1 + l) : ny] <= qy[j])
gammax[i, j] = (1/(nx - l))*sum(ax * bx)-qx[i]*qx[j]
gammay[i, j] = (1/(ny - l))*sum(ay * by)-qy[i]*qy[j]
}
}
EuclideanDistance(as.vector(gammax), as.vector(gammay))
}
qaf_mts <- function(X, Y){
c <- ncol(X)
dist <- 0
for (i in 1 : c) {
dist <- dist + qac_uts(X[,i], Y[,i])
}
dist
}
ar <- arima.sim(n = 100, list(ar = 0.9))
ar
ar + 5
ar[[1]]
ar[1]
as.matrix(a)
class(a)
ar <- arima.sim(n = 100, list(ar = 0.9))
ma <- arima.sim(n = 100, list(ma = -0.7))
arma <- arima.sim(n = 100, list(ar = 0.8, ma = 0.2))
arma
models <- matrix(nrow = 300, ncol = 100)
for (i in 1 : 100){
models[i,] <- arima.sim(n = 100, list(ar = 0.9))
}
models <- matrix(nrow = 300, ncol = 100)
for (i in 1 : 100){ # First model
models[i,] <- arima.sim(n = 100, list(ar = 0.9))
}
for (i in 101 : 200){ # Second model
ma <- arima.sim(n = 100, list(ma = -0.7))
}
for (i in 201 : 300){ # Third model
arma <- arima.sim(n = 100, list(ar = 0.8, ma = 0.2))
}
models
models[295:299, 5:10]
models <- matrix(nrow = 300, ncol = 100)
for (i in 1 : 100){ # First model
models[i,] <- arima.sim(n = 100, list(ar = 0.9))
}
for (i in 101 : 200){ # Second model
models <- arima.sim(n = 100, list(ma = -0.7))
}
for (i in 201 : 300){ # Third model
models <- arima.sim(n = 100, list(ar = 0.8, ma = 0.2))
}
tail(models)
models[300,]
models <- matrix(nrow = 300, ncol = 100)
for (i in 1 : 100){ # First model
models[i,] <- arima.sim(n = 100, list(ar = 0.9))
}
for (i in 101 : 200){ # Second model
models[i,] <- arima.sim(n = 100, list(ma = -0.7))
}
for (i in 201 : 300){ # Third model
models[i,] <- arima.sim(n = 100, list(ar = 0.8, ma = 0.2))
}
models[300,]
dis_matrix <- matrix(0, 300, 300)
for (i in 1 : 300) {
for (j in 1 : 300) {
dis_matrix[i, j] <- qaf_uts(models[i,], models[j,])
}
}
dis_matrix
dim(dis_matrix)
ground_truth <- c(rep(1, 100), rep(2, 100), rep(3, 100))
ground_truth
hierarchical <- hclust(dist(dis_matrix))
clustering <- cutree(hierarchical, 3)
clustering
dis_matrix[1, 10]
dis_matrix[1, 11]
dis_matrix[1, 12]
dis_matrix[1, 13]
dis_matrix[1, 15]
dis_matrix[1, 40]
dis_matrix[1, 50]
dis_matrix[1, 90]
dis_matrix[1, 110]
dis_matrix[1, 1301]
dis_matrix[1, 299]
dis_matrix[1, 280]
dis_matrix[1, 199]
dis_matrix[1, 245]
mts_plot(models[1,])
mts_plot(models[2,])
mts_plot(models[3,])
mts_plot(models[4,])
mts_plot(models[5,])
mts_plot(models[15,])
mts_plot(models[56,])
mts_plot(models[101,])
mts_plot(models[110,])
mts_plot(models[220,])
dis_matrix[1:10, 1:10]
mts_plot <- function(series){
df_series <- as.matrix(series)
df <- NULL
temp_df <- NULL
n <- nrow(df_series)
c <- ncol(df_series)
for(i in 1 : c){
temp_df <- data.frame(x = 1:n, y = df_series[,i], col = rep(i, n))
df <- rbind(df,temp_df)}
ggplot(df, aes(x = x, y = y, group = col, colour = factor(col))) + geom_line(size = 1) + xlab('Time') +
ylab('Series') + theme(legend.position = "none")
}
mts_plot(models[220,])
mts_plot <- function(series){
df_series <- as.matrix(series)
df <- NULL
temp_df <- NULL
n <- nrow(df_series)
c <- ncol(df_series)
for(i in 1 : c){
temp_df <- data.frame(x = 1:n, y = df_series[,i], col = rep(i, n))
df <- rbind(df,temp_df)}
ggplot(df, aes(x = x, y = y, group = col, colour = factor(col))) + geom_line(size = 0.8) + xlab('Time') +
ylab('Series') + theme(legend.position = "none")
}
mts_plot(models[220,])
mts_plot <- function(series){
df_series <- as.matrix(series)
df <- NULL
temp_df <- NULL
n <- nrow(df_series)
c <- ncol(df_series)
for(i in 1 : c){
temp_df <- data.frame(x = 1:n, y = df_series[,i], col = rep(i, n))
df <- rbind(df,temp_df)}
ggplot(df, aes(x = x, y = y, group = col, colour = factor(col))) + geom_line(size = 0.7) + xlab('Time') +
ylab('Series') + theme(legend.position = "none")
}
mts_plot(models[220,])
mts_plot <- function(series){
df_series <- as.matrix(series)
df <- NULL
temp_df <- NULL
n <- nrow(df_series)
c <- ncol(df_series)
for(i in 1 : c){
temp_df <- data.frame(x = 1:n, y = df_series[,i], col = rep(i, n))
df <- rbind(df,temp_df)}
ggplot(df, aes(x = x, y = y, group = col, colour = factor(col))) + geom_line() + xlab('Time') +
ylab('Series') + theme(legend.position = "none")
}
mts_plot(models[220,])
mts_plot <- function(series){
df_series <- as.matrix(series)
df <- NULL
temp_df <- NULL
n <- nrow(df_series)
c <- ncol(df_series)
for(i in 1 : c){
temp_df <- data.frame(x = 1:n, y = df_series[,i], col = rep(i, n))
df <- rbind(df,temp_df)}
ggplot(df, aes(x = x, y = y, group = col, colour = factor(col))) + geom_line(size = 0.8) + xlab('Time') +
ylab('Series') + theme(legend.position = "none")
}
mts_plot(models[220,])
nx
l
qx
qy
models <- matrix(nrow = 300, ncol = 100)
for (i in 1 : 100){ # First model
models[i,] <- arima.sim(n = 100, list(ar = 0.9))
}
for (i in 101 : 200){ # Second model
models[i,] <- arima.sim(n = 100, list(ma = -0.7))
}
for (i in 201 : 300){ # Third model
models[i,] <- arima.sim(n = 100, list(ar = 0.8, ma = 0.2))
}
ground_truth <- c(rep(1, 100), rep(2, 100), rep(3, 100))
dis_matrix <- matrix(0, 300, 300)
for (i in 1 : 300) {
for (j in 1 : 300) {
dis_matrix[i, j] <- qaf_uts(models[i,], models[j,])
}
}
hierarchical <- hclust(dist(dis_matrix))
clustering <- cutree(hierarchical, 3)
clustering
gammax
qaf_mts <- function(X, Y){
c <- ncol(X)
dist <- 0
for (i in 1 : c) {
dist <- dist + qac_uts(X[,i], Y[,i])
}
dist
}
EuclideanDistance(as.vector(gammax), as.vector(gammay))
EuclideanDistance(as.vector(gammax), as.vector(gammay))
EuclideanDistance(as.vector(gammax), as.vector(gammay))
EuclideanDistance(as.vector(gammax), as.vector(gammay))
EuclideanDistance(as.vector(gammax), as.vector(gammay))
EuclideanDistance(as.vector(gammax), as.vector(gammay))
EuclideanDistance(as.vector(gammax), as.vector(gammay))
qaf_uts(models[1,], models[2,])
qaf_uts(models[1,], models[3,])
qaf_uts(models[1,], models[4,])
qaf_uts(models[1,], models[5,])
qaf_uts(models[1,], models[6,])
qaf_uts(models[1,], models[500,])
qaf_uts(models[1,], models[4,])
models <- matrix(nrow = 900, ncol = 100)
for (i in 1 : 300){ # First model
models[i,] <- arima.sim(n = 100, list(ar = 0.9))
}
for (i in 301 : 600){ # Second model
models[i,] <- arima.sim(n = 100, list(ma = -0.7))
}
for (i in 601 : 900){ # Third model
models[i,] <- arima.sim(n = 100, list(ar = 0.8, ma = 0.2))
}
ground_truth <- c(rep(1, 300), rep(2, 300), rep(3, 300))
dis_matrix <- matrix(0, 300, 300)
dis_matrix <- matrix(0, 900, 900)
for (i in 1 : 900) {
for (j in 1 : 900) {
dis_matrix[i, j] <- qaf_uts(models[i,], models[j,])
}
}
hierarchical <- hclust(dist(dis_matrix))
clustering <- cutree(hierarchical, 3)
clustering
models <- matrix(nrow = 300, ncol = 200)
for (i in 1 : 100){ # First model
models[i,] <- arima.sim(n = 200, list(ar = 0.9))
}
for (i in 101 : 200){ # Second model
models[i,] <- arima.sim(n = 200, list(ma = -0.7))
}
for (i in 201 : 300){ # Third model
models[i,] <- arima.sim(n = 200, list(ar = 0.8, ma = 0.2))
}
ground_truth <- c(rep(1, 100), rep(2, 100), rep(3, 100))
dis_matrix <- matrix(0, 300, 300)
for (i in 1 : 300) {
for (j in 1 : 300) {
dis_matrix[i, j] <- qaf_uts(models[i,], models[j,])
}
}
hierarchical <- hclust(dist(dis_matrix))
clustering <- cutree(hierarchical, 3)
clustering
RStudio.Version()
