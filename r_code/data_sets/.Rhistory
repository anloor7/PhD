discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
for (i in 1 : n) {
for (k in 1 : K) {
Y <- X[[i]] %*% s[[k]] %*% t(s[[k]])
error_matrix[i, k] <- norm(X[[i]] - Y, type = 'F')
}
}
discrete_matrix <- matrix(0, nrow = n, ncol = K)
for (i in 1 : n) {
for (k in 1 : K) {
discrete_matrix[i, k] <- error_matrix[i, k]/min(error_matrix[i,])
}
}
for (k in 1 : K) {
l[[k]] <- which(discrete_matrix[,k] == 1)
}
juju <- listToclustering(l)
table(cluatering)
table(juju)
external_validation(cluatering, ground_truth)
external_validation(cluatering, ground_truth, summary_stats = T)
table(clustering)
table(cluatering)
K
external_validation(mc2pca(X, 10, lambda = 0.85, 50, 0.01), clustering, summary_stats = T)
external_validation(mc2pca(X, 10, lambda = 0.85, 50, 0.01), clustering, summary_stats = T)
external_validation(mc2pca(X, 10, lambda = 0.85, 50, 0.01), ground_truth, summary_stats = T)
length(x)
length(X)
length(ground_truth)
clustering <- mc2pca(X, 10, lambda = 0.85, 50, 0.01)
external_validation(clustering, ground_truth, summary_stats = T)
table(clustering)
ground_truth
clustering <- mc2pca(X, 10, lambda = 0.85, 50, 0.01)
external_validation(clustering, ground_truth, summary_stats = T)
table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.85, 200, 0.01)
external_validation(clustering, ground_truth, summary_stats = T)
clustering <- mc2pca(X, 10, lambda = 0.85, 200, 0.01); external_validation(clustering, ground_truth, summary_stats = T)
clustering <- mc2pca(X, 10, lambda = 0.85, 1000, 0.01); external_validation(clustering, ground_truth, summary_stats = T)
table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.85, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.85, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.80, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.80, 100, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.80, 100, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.80, 100, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.80, 100, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.80, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.85, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.85, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.85, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.80, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.82, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.75, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.70, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.20, 300, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.83, 400, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.83, 400, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.83, 100, 0.01); external_validation(clustering, ground_truth, summary_stats = T); table(clustering)
clustering <- mc2pca(X, 10, lambda = 0.83, 150, 0.01)
external_validation(clustering, ground_truth, method = 'purity')
B <- numeric(50)
for (i in 1 : 20) {
clustering <- mc2pca(X, 10, lambda = 0.83, 200, 0.01)
B[i] <- external_validation(clustering, ground_truth, method = 'purity')
}
mean(B)
0.1638 * (5/2)
n <- length(X)
L <- floor(n/K)
sigma <- vector(mode = 'list', length = n)
error_matrix <- matrix(0, nrow = n, ncol = K) # Initialization of error matrix
for (i in 1 : n) {
for (j in 1 : ncol(X[[i]])) {
X[[i]][,j] <- X[[i]][,j] - mean((X[[i]])[,j])
sigma[[i]] <- cov(X[[i]]) # Covariance matrices of each normalized MTS
}
}
l <- vector(mode = 'list')
s <- vector(mode = 'list') # Initialization of projection axes
sample <- sample(n)
for (k in 1 : (K-1)) {
l[[k]] <- sample[(k - 1) * L + 1 : L]
}
l[[K]] <- sample[(K - 1) * L + 1 : (L + (length(sample) - K * L))]
lambda <- 0.83
l <- vector(mode = 'list')
s <- vector(mode = 'list') # Initialization of projection axes
sample <- sample(n)
for (k in 1 : (K-1)) {
l[[k]] <- sample[(k - 1) * L + 1 : L]
}
l[[K]] <- sample[(K - 1) * L + 1 : (L + (length(sample) - K * L))]
for(k in 1 : K){
s[[k]] <- cpca(sigma[l[[k]]], lambda = lambda)
}
s[[1]]
s[[5]]
s[[6]]
s[[8]]
s[[123]]
s[[10]]
l <- vector(mode = 'list')
s <- vector(mode = 'list') # Initialization of projection axes
sample <- sample(n)
for (k in 1 : (K-1)) {
l[[k]] <- sample[(k - 1) * L + 1 : L]
}
l[[K]] <- sample[(K - 1) * L + 1 : (L + (length(sample) - K * L))]
for(k in 1 : K){
s[[k]] <- cpca(sigma[l[[k]]], lambda = lambda)
}
lambda = 0.75
l <- vector(mode = 'list')
s <- vector(mode = 'list') # Initialization of projection axes
sample <- sample(n)
for (k in 1 : (K-1)) {
l[[k]] <- sample[(k - 1) * L + 1 : L]
}
l[[K]] <- sample[(K - 1) * L + 1 : (L + (length(sample) - K * L))]
for(k in 1 : K){
s[[k]] <- cpca(sigma[l[[k]]], lambda = lambda)
}
s[[1]]
s[[2]]
s[[3]]
s[[6]]
s[[10]]
B <- numeric(20)
for (i in 1 : 20) {
clustering <- mc2pca(X, 10, lambda = 0.75, 200, 0.01)
B[i] <- external_validation(clustering, ground_truth, method = 'purity')
}
mean(B)
B
ggplot(c(8,8))
ggplot2
ggplot2::ggplot(c(8,8))
ClusterR::external_validation(c(1,1), c(1, 1))
ClusterR::external_validation(c(1,2), c(1, 2))
ClusterR::external_validation(c(1,2, 3), c(1, 2, 3, 3))
ClusterR::external_validation(c(1,2, 3), c(1, 2, 2))
ClusterR::external_validation(c(1,2, 3, 2), c(1, 2, 2, 2))
ggplot2
pwd()
getwd()
a = function(){}
a
source('/Users/angellopezoriona/Library/Mobile Documents/com~apple~CloudDocs/git_hub/PhD_degree/r_code/functions/kmeans_function.R')
source('/Users/angellopezoriona/Library/Mobile Documents/com~apple~CloudDocs/git_hub/PhD_degree/r_code/functions/varma_coef.R')
getwd()
R.home(component = "home")
path.expand("~")
R.home(component = "home")
ggplot()
Sys.getenv("R_HOME")
externalRefMethod
